---
version: "3.4"

services:
  postgresql:
    image: postgres
    container_name: authentik-db
    restart: unless-stopped
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER:-authentik}
      POSTGRES_DB: ${DB_NAME:-authentik}
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
  redis:
    image: redis:alpine
    container_name: authentik-cache
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ghcr.io/goauthentik/server
    container_name: authentik
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${DB_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${DB_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    ports:
      # - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${PORT}:9000"
      - "${PORTS}:9443"
    depends_on:
      - postgresql
      - redis
  worker:
    image: ghcr.io/goauthentik/server
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${DB_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${DB_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${DB_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
  db-backup:
    container_name: authentik-db-backup
    image: tiredofit/db-backup
    links:
     - postgresql
    volumes:
      - /home/ezcafe/backups/authentik:/backup
      - /home/ezcafe/raspberry/scripts/backup-post-script.sh:/assets/custom-scripts/post-script.sh
    environment:
      # - DEBUG_MODE=TRUE
      - DB_TYPE=pgsql
      - DB_HOST=postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      # - DB_DUMP_BEGIN=0000      # backup starts immediately
      - DB_DUMP_FREQ=1440       # backup every x minute - 1440 = 1 day
      - DB_CLEANUP_TIME=11520   # clean backups they are older than x minute - 11520 = 8 days
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - SPLIT_DB=FALSE
      - CONTAINER_ENABLE_MONITORING=FALSE
      - TZ=${TZ}
    restart: unless-stopped

volumes:
  database:
  redis:
